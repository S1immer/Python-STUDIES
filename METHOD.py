# !!!МЕТОД!!! .replace()

# Эта функция убирает все восклицательные знаки из заданного текста
# Так же можно убирать другие знаки, не обязательно (!).

def remove_exclamation_marks(s):
    # Тут в () написано, что текст сначала был с !, после применения .replace, текст на выходе ставится без !.
    return s.replace('!', '')


text = ('Hello!!! My frends!')

print(remove_exclamation_marks(text))
# Вывод: Hello My frends


# __________________________________________________________________________________________________________

# !!!МЕТОД!!! .join()

# Этот метод работает только со строкой (наверное)


def smash(words):
    words = ('Hello', 'My', 'Frends')
    return " ".join(words)


print(smash(words=('Hello', 'My', 'Frends')))
# Hello My Frends


def string(name):

    result = '-'.join(name)
    return result


print(string('Daniil'))
# # Вывод: D-a-n-i-i-l

my_string = 'Hello'
result = '-'.join(my_string)
print(result)  # Вывод: H-e-l-l-o
# # Вывод: H-e-l-l-o

# __________________________________________________________

# !!!МЕТОД!!! .get()

person = {"name": "Alice", "age": 30}

# Получение значения по ключу "name"
name = person.get("name")
print(name)  # Output: Alice

# Получение значения по ключу "city" (ключа, которого нет в словаре)
city = person.get("city")
print(city)  # Output: None

# Получение значения по ключу "city" с указанием значения по умолчанию
city = person.get("city", "Unknown")
print(city)  # Output: Unknown

# _______________________________________________

# !!!МЕТОД!!! .append()

# Метод .append() применяется к списку и используется для добавления нового элемента в конец этого списка.
my_list = [1, 2, 3]

# Добавляем новый элемент в конец списка
my_list.append(4)

# Выведем результат
print(my_list)
# [1, 2, 3, 4]

# _____________________________________________________

# !!!МЕТОД!!! .items()

# Метод .items() используется для получения представления всех элементов (пар ключ-значение)
# из словаря в виде объекта, который можно использовать для итерации или передачи в другие функции.
# Когда вызывается на словаре, этот метод возвращает представление всех элементов словаря
# в виде объекта типа dict_items.

my_dict = {'a': 1, 'b': 2, 'c': 3}
items = my_dict.items()

# Преобразуем dict_items в список
items_list = list(items)

# Выводим список
print(items_list)
# [('a', 1), ('b', 2), ('c', 3)]

# ___________________________________________________________

# !!! Метод !!!  .isinstance()

# isinstance() - это функция в Python, которая используется для проверки принадлежности объекта
# к определенному типу данных. Она принимает два аргумента: объект, который нужно проверить,
# и тип данных, к которому он должен принадлежать. Если объект принадлежит указанному типу,
# функция возвращает True, в противном случае - False.

x = 5
print(isinstance(x, int))  # True

y = "Hello"
print(isinstance(y, str))  # True

z = [1, 2, 3]
print(isinstance(z, list))  # True

w = 3.14
print(isinstance(w, int))  # False

# x является целым числом, поэтому isinstance(x, int) возвращает True.
# y является строкой, поэтому isinstance(y, str) возвращает True.
# z является списком, поэтому isinstance(z, list) возвращает True.
# w является числом с плавающей точкой, но не целым числом, поэтому isinstance(w, int) возвращает False.

# _______________________________________________________

# !!! Метод !!!   .lower()

# Метод lower() - это метод строки в Python, который используется для преобразования
# всех символов строки в нижний регистр.
answer = input("Yes or No? ")
if answer.lower() == "yes":
    print("You said yes!")
elif answer.lower() == "no":
    print("You said no!")
else:
    print("I didn't understand your answer.")

# Таким образом, независимо от того, как пользователь введет "yes" или "YES" или "Yes",
# метод lower() преобразует все символы в нижний регистр, и условие сравнения будет выполняться корректно


# !!! Метод !!!  .reverse

# Метод .reverse() используется для изменения порядка элементов в списке на противоположный.
# Это означает, что последний элемент списка становится первым, предпоследний - вторым и так далее,
# а первый элемент становится последним.

my_list = [1, 2, 3, 4, 5]
my_list.reverse()
print(my_list)
# [5, 4, 3, 2, 1]
